// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Facultad {
  id       Int      @id @default(autoincrement())
  nombre   String   @unique
  carreras Carrera[]
}

model Carrera {
  id         Int         @id @default(autoincrement())
  nombre     String      @unique
  facultad   Facultad    @relation(fields: [facultadId], references: [id])
  facultadId Int
  users      User[]
  coordinaciones Coordinacion[]
  carreraCampus CarreraCampus[]
}

model Campus {
  id         Int         @id @default(autoincrement())
  nombre     String      @unique
  sede       Sede        @relation(fields: [sedeId], references: [id])
  sedeId     Int
  users      User[]
  coordinaciones Coordinacion[]
  carreraCampus CarreraCampus[]
}

model Sede {
  id     Int     @id @default(autoincrement())
  nombre String  @unique
  campus Campus[]
}

model CarreraCampus {
  id         Int      @id @default(autoincrement())
  carreraId  Int
  campusId   Int

  carrera    Carrera  @relation(fields: [carreraId], references: [id])
  campus     Campus   @relation(fields: [campusId], references: [id])

  @@unique([carreraId, campusId])
}

model Coordinacion {
  id         String   @id @default(cuid())
  userId     Int
  campusId   Int
  carreraId  Int

  user       User     @relation(fields: [userId], references: [id])
  campus     Campus   @relation(fields: [campusId], references: [id])
  carrera    Carrera  @relation(fields: [carreraId], references: [id])

  @@unique([userId, campusId, carreraId])
}

model User {
  id        Int      @id @default(autoincrement())
  uid       String   @unique
  email     String   @unique
  firstName String
  lastName  String
  rut       String   @unique

  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])

  carreraId Int
  carrera   Carrera  @relation(fields: [carreraId], references: [id])

  campusId  Int
  campus    Campus   @relation(fields: [campusId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  citas           Cita[] @relation("Estudiante")
  citasAsignadas  Cita[] @relation("Coordinador")

  coordinaciones Coordinacion[]
}

enum ModalidadCita {
  presencial
  virtual
}

enum EstadoCita {
  pendiente
  aceptada
  rechazada
}

model Cita {
  id             Int      @id @default(autoincrement())
  estudianteId   Int
  coordinadorId  Int
  fecha          DateTime
  reagendadaEn DateTime?
  gestionadaEn   DateTime? 
  modalidad      ModalidadCita
  descripcion    String   @db.Text
  estado         EstadoCita @default(pendiente)
  observacion    String?
  createdAt      DateTime @default(now())

  estudiante     User @relation("Estudiante", fields: [estudianteId], references: [id])
  coordinador    User @relation("Coordinador", fields: [coordinadorId], references: [id])
}